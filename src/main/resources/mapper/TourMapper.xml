<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.with.withlocalhost.tour.model.repository.TourRepository">

	<resultMap id="tourResultMap"
		type="com.with.withlocalhost.tour.model.TourDto">
		<id property="tourId" column="tour_id" />
		<result property="guidName" column="guid_name" />
		<result property="title" column="title" />
		<result property="content" column="tour_content" />
		<result property="peopleCnt" column="people_cnt" />
		<result property="meetAddress" column="meet_address" />
		<result property="meetLatitude" column="meet_latitude" />
		<result property="meetLongitude" column="meet_longitude" />
		<result property="mainImgUrl" column="main_img_url" />
		<result property="reviewAvg" column="review_avg" />
		<result property="needDate" column="need_date"/>
		
		<!-- categorys 리스트 매핑 -->
		<collection property="categorys"
			ofType="com.with.withlocalhost.tour.model.CategoryDto">
			<result property="categoryName" column="category_name" />
		</collection>

		<!-- options 리스트 매핑 -->
		<collection property="options"
			ofType="com.with.withlocalhost.tour.model.OptionDto">
			<result property="optionName" column="option_name" />
		</collection>
		
		    <!-- activities 리스트 매핑 -->
    <collection property="activities"
        ofType="com.with.withlocalhost.tour.model.ActivityDto">
        <result property="actName" column="act_name" />
        <result property="actContents" column="act_contents" />
        <result property="actAddress" column="act_address" />
        <result property="actLatitude" column="act_latitude" />
        <result property="actLongitude" column="act_longitude" />
        <result property="actImgUrl" column="act_img_url" />
    </collection>
		
			        <!-- reviews 리스트 매핑 -->
        <collection property="reviews" ofType="com.with.withlocalhost.review.model.ReviewDto">
            <result property="reservater" column="review_reservater" />
            <result property="reviewContent" column="review_content" />
            <result property="reviewScore" column="review_score" />
        </collection>	
        	
        <collection property="reservations" ofType="com.with.withlocalhost.reservation.model.ReservationDto">
	        <id property="reservationId" column="reservation_id"/>
	        <result property="tourId" column="tour_id"/>
	        <result property="reservater" column="reservater"/>
	        <result property="startDate" column="start_date"/>
	        <result property="endDate" column="end_date"/>
	        <result property="reservationPeople" column="reservation_people"/>
	        <result property="reservationPay" column="reservation_pay"/>
	        <result property="reservationStatus" column="reservation_status"/>
    	</collection>	
	</resultMap>
	

	<select id="tourAllList" resultMap="tourResultMap">
	    select DISTINCT
	        t.tour_id,
	        t.guid_name,
	        t.title,
	        t.tour_content,
	        t.people_cnt,
	        t.meet_address,
	        t.meet_latitude,
	        t.meet_longitude,
	        t.main_img_url,
	        o.option_name,
	        c.category_name,
	        r.average_review_score as review_avg
	    from 
	        tour as t
	    left join
	        tour_option_view as o using (tour_id)
	    left join
	        tour_category_view as c using(tour_id)
	    left join
	        tour_review_summary as r using (tour_id);
	</select>

	<!-- tourDetail -->
	<select id="tourRecentList" resultMap="tourResultMap">
		SELECT
		    t.tour_id,
		    t.guid_name,
		    t.title,
		    t.tour_content,
		    t.people_cnt,
		    t.meet_address,
		    t.meet_latitude,
		    t.meet_longitude,
		    t.main_img_url,
		    o.option_name,
		    c.category_name,
		    r.average_review_score as review_avg
		FROM 
		    tour AS t
		LEFT JOIN
		    tour_option_view AS o USING (tour_id)
		LEFT JOIN
		    tour_category_view AS c USING (tour_id)
		LEFT JOIN
		    tour_review_summary AS r USING (tour_id)
		JOIN (
		    SELECT tour_id
		    FROM tour
		    ORDER BY tour_id DESC
		    LIMIT 10
		) AS recent_tours
		    ON t.tour_id = recent_tours.tour_id
		ORDER BY
		    t.tour_id DESC;
	</select>
	 
	<select id="tourDetail" resultMap="tourResultMap">
	    	    SELECT
	        t.tour_id
	        , t.guid_name
	        , t.title
	        , t.tour_content
	        , t.people_cnt
	        , t.need_date
	        , t.meet_address
	        , t.meet_latitude
	        , t.meet_longitude
	        , t.main_img_url
	        , a.act_name
	        , a.act_contents
	        , a.act_address
	        , a.act_latitude
	        , a.act_longitude
	        , a.act_img_url
	        , o.option_name
	        , c.category_name
	        , r.reservater as review_reservater
	        , r.review_content
	        , r.review_score
	        , r.average_review_score AS review_avg
	        , re.reservation_id
            , re.start_date
            , re.end_date
	    FROM
	        tour AS t
	    LEFT JOIN
	        tour_option_view AS o USING (tour_id)
	    LEFT JOIN
	        tour_category_view AS c USING(tour_id)
	    LEFT JOIN
	        tour_activity_view AS a USING(tour_id)
	    LEFT JOIN
	        tour_review_summary AS r USING(tour_id)
		LEFT JOIN 
			reservation as re on r.tour_id = re.tour_id
	    WHERE
	        t.tour_id = #{tourId}
            and
            re.reservation_status !='C';
	</select>
	
	<!-- 투어 검색 -->
	<select id="tourSearch" resultMap="tourResultMap">
		    SELECT
	        t.tour_id,
	        t.guid_name,
	        t.title,
	        t.people_cnt,
	        t.meet_address,
	        t.meet_latitude,
	        t.meet_longitude,
	        t.main_img_url,
	        o.option_name,
	        c.category_name,
	        r.average_review_score AS review_avg
	    FROM 
	        tour AS t
	    LEFT JOIN
	        tour_option_view AS o ON t.tour_id = o.tour_id
	    LEFT JOIN
	        tour_category_view AS c ON t.tour_id = c.tour_id
	    LEFT JOIN
	        tour_review_summary AS r ON t.tour_id = r.tour_id
	    WHERE 1=1
	    <!-- 시작일과 종료일 조건 -->
	    <if test="startDate != null and endDate != null">
	        AND NOT EXISTS (
	            SELECT 1
	            FROM tour AS t2
	            WHERE t2.tour_id = t.tour_id
	            AND (
	                (t2.start_date <![CDATA[BETWEEN]]> #{startDate} AND #{endDate}) OR
	                (t2.end_date <![CDATA[BETWEEN]]> #{startDate} AND #{endDate}) OR
	                (t2.start_date <![CDATA[<=]]> #{startDate} AND t2.end_date <![CDATA[>=]]> #{endDate})
	            )
	        )
	    </if>
	    <!-- 시작일만 있을 때 -->
	    <if test="startDate != null and endDate == null">
	        AND NOT EXISTS (
	            SELECT 1
	            FROM tour AS t2
	            WHERE t2.tour_id = t.tour_id
	            AND t2.start_date <![CDATA[>=]]> #{startDate}
	        )
	    </if>
	    <!-- 종료일만 있을 때 -->
	    <if test="startDate == null and endDate != null">
	        AND NOT EXISTS (
	            SELECT 1
	            FROM tour AS t2
	            WHERE t2.tour_id = t.tour_id
	            AND t2.end_date <![CDATA[<=]]> #{endDate}
	        )
	    </if>
	    <!-- 옵션 조건 -->
	    <if test="options != null and !options.isEmpty()">
	        AND o.category_id IN
	        <foreach collection="options" item="option" open="(" separator="," close=")">
	            #{option}
	        </foreach>
	    </if>
	    <!-- 카테고리 조건 -->
	    <if test="categories != null and !categories.isEmpty()">
	        AND c.category_id IN
	        <foreach collection="categories" item="category" open="(" separator="," close=")">
	            #{category}
	        </foreach>
	    </if>
	    <!-- 도시 조건 -->
	    <if test="cities != null and !cities.isEmpty()">
	        AND t.city_id IN
	        <foreach collection="cities" item="city" open="(" separator="," close=")">
	            #{city}
	        </foreach>
	    </if>
	    <!-- 지역 조건 -->
	    <if test="regionId != null">
	        AND t.region_id = #{regionId}
	    </if>

	</select>

	<!-- data insert 구문-->
	<insert id="createTour" parameterType="com.with.withlocalhost.tour.model.CreateTourDto" useGeneratedKeys="true" keyProperty="tourId">
		insert into tour(
			guid_name,
			title,
			tour_content,
			people_cnt,
			pay,
			notice,
			meet_address,
			meet_latitude,
			meet_longitude,
			main_img_url,
			city_id,
			region_id,
			need_date
		) values (
			#{guidName},
			#{title},
			#{tourContent},
			#{peopleCnt},
			#{pay},
			#{notice},
			#{meetAddress},
			#{meetLatitude},
			#{meetLongitude},
			#{mainImgUrl},
			#{cityId},
			#{regionId},
			#{needDate},
		)
	</insert>


	<insert id="createCategory" parameterType="com.with.withlocalhost.tour.model.CreateTourDto">
	    INSERT INTO tour_category (tour_id, category_id)
	    VALUES
    	<foreach collection="categorys" item="category" separator=",">
        (#{tourId}, #{category.categoryId})
    	</foreach>
	</insert>

	<insert id="createOption" parameterType="com.with.withlocalhost.tour.model.CreateTourDto">
	    INSERT INTO tour_option (tour_id, category_id)
	    VALUES
	    <foreach collection="options" item="option" separator=",">
	        (#{tourId}, #{option.categoryId})
	    </foreach>
	</insert>

	<insert id="createActivity" parameterType="com.with.withlocalhost.tour.model.CreateTourDto">
	    INSERT INTO tour_activity (
			tour_id
			,category_id
			,act_name
			,act_contents
			,act_address
			,act_latitude
			,act_longitude
		)
	    VALUES
	    <foreach collection="activities" item="activity" separator=",">
	        (#{tourId}
	        , #{activity.categoryId}
	        , #{activity.actName}
	        , #{activity.actContents}
	        , #{activity.actAddress}
	        , #{activity.actLatitude}
	        , #{activity.actLongitude}
	        , #{activity.actImgUrl}
	  		)
	    </foreach>
	</insert>

	<select id="myTourList" resultMap="tourResultMap" parameterType="String">
	    select DISTINCT
	        t.tour_id,
	        t.guid_name,
	        t.title,
	        t.tour_content,
	        t.people_cnt,
	        t.meet_address,
	        t.meet_latitude,
	        t.meet_longitude,
	        t.main_img_url,
	        o.option_name,
	        c.category_name,
	        r.average_review_score as review_avg
	    from 
	        tour as t
	    left join
	        tour_option_view as o using (tour_id)
	    left join
	        tour_category_view as c using(tour_id)
	    left join
	        tour_review_summary as r using (tour_id)
	    where guid_name = #{userId};
	</select>




</mapper>



